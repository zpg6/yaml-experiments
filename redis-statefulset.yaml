

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
spec:
  serviceName: redis
  replicas: 3
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      initContainers:
        - name: module-loader
          image: curlimages/curl:7.73.0
          volumeMounts:
            - name: redis-config
              mountPath: /etc/redis/
          command: [ "sh", "-c" ]
          args:
            - |
              echo "downloading redisgraph.so file..."
              curl -o /etc/redis/redisgraph.so https://raw.githubusercontent.com/zpg6/yaml-experiments/main/redisgraph.so
              FILE=/etc/redis/redisgraph.so
              if test -f "$FILE"; then
                echo "$FILE successfully set in place."
              else 
                echo "$FILE does not exist."
              fi
              echo "done with initContainer - module-loader"
        - name: config
          image: redis
          command: [ "/bin/bash", "-c" ]
          args:
            - |
              cp /tmp/redis/redis.conf /etc/redis/redis.conf
              
              echo "finding master..."
              if [ "$(redis-cli -h sentinel -p 5000 ping)" != "PONG" ]; then
                echo "master not found, defaulting to redis-0"
                str="redis-0"
                if [ "$(hostname)" ==  "$str" ]; then
                  echo "shoot, i am redis-0...not updating config..."
                else
                  echo "updating redis.conf..."
                  echo "slaveof redis-0.redis.redis.svc.cluster.local 6379" >> /etc/redis/redis.conf
                fi
              else
                echo "sentinel found, finding master"
                MASTER="$(redis-cli -h sentinel -p 5000 sentinel get-master-addr-by-name mymaster | grep -E '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}')"
                echo "master found : $MASTER, updating redis.conf"
                echo "slaveof $MASTER 6379" >> /etc/redis/redis.conf
              fi
              echo "done with initContainer - config"
              echo "moving to executing the server start"
          volumeMounts:
          - name: redis-config
            mountPath: /etc/redis/
          - name: config
            mountPath: /tmp/redis/
      containers:
      - name: redis
        image: redislabs/redisgraph
        command:
        - redis-server
        - "/etc/redis/redis.conf"
        ports:
        - containerPort: 6379
          name: redis
        volumeMounts:
        - name: data
          mountPath: /data
        - name: redis-config
          mountPath: /etc/redis/
      volumes:
      - name: redis-config
        emptyDir: {}
      - name: config
        configMap:
          name: redis-config
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: "redis-sc"
      resources:
        requests:
          storage: 50Mi

---

apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: redis-sc
provisioner: kubernetes.io/gce-pd
parameters:
  type: pd-standard
  fstype: ext4
volumeBindingMode: WaitForFirstConsumer


---
apiVersion: v1
kind: Service
metadata:
  name: redis
spec:
  clusterIP: None
  ports:
  - port: 6379
    targetPort: 6379
    name: redis
  selector:
    app: redis